name: CICD ðŸš€

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - access-analyser

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_ARN }}
          role-session-name: "ghgc-airflow-github--deployment"
          aws-region: "us-west-2"

      - name: Run deployment
        uses: "./.github/actions/terraform-deploy"
        with:
          env_aws_secret_name: ${{ secrets.ENV_AWS_SECRET_NAME }}
          env-file: ".env_development"

      - name: Record start time
        run: |
          start=$(date +%s)
          echo "start=$start" >> $GITHUB_ENV
      - name: Run deployment
        uses: "./.github/actions/cdk-deploy"
        with:
            env_aws_secret_name: ghgc-auth-dev
      - name: Wait before starting policy generation
        run: sleep 130
      - name: Start policy generation
        run: |
          end=$(date +%s)
          output=$(aws accessanalyzer start-policy-generation \
          --policy-generation-details '{
              "principalArn": "arn:aws:iam::193333210305:role/Git_Role_Test"
          }' \
          --cloud-trail-details '{
              "accessRole": "arn:aws:iam::193333210305:role/Git_Role_Test",
              "endTime": '$end',
              "startTime": '${{ env.start }}',
              "trails": [
              {
                  "allRegions": true,
                  "cloudTrailArn": "arn:aws:cloudtrail:us-east-1:193333210305:trail/CDK-OIDC-GitHub-Trail",
                  "regions": []
              }
              ]
          }')
          jobId=$(echo "$output" | jq -r .jobId)
          echo "policy_id='$jobId'" >> $GITHUB_ENV
      - name: Check job status
        run: |
          while true; do
              result=$(aws accessanalyzer get-generated-policy --job-id '${{ env.policy_id }}')
              status=$(echo "$result" | jq -r '.jobDetails.status')
              if [ "$status" = "SUCCEEDED" ]; then
              echo "status=$status" >> "GITHUB_ENV"
              break
              fi
              echo "Waiting for the policy generation to complete, current status: $status"
              sleep 30
          done
      - name: Retrieve policy
        run: |
          policy=$(aws accessanalyzer get-generated-policy --job-id '${{ env.policy_id }}' | jq '.generatedPolicyResult.generatedPolicies[0].policy' | jq -c .)
          if [[ -z "$policy" ]]; then
              echo "Fail :("
          fi
              echo "$policy"
    